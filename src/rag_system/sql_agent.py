import os
import logging
from dotenv import load_dotenv

# langchain
from langchain_community.utilities import SQLDatabase
from langchain_community.agent_toolkits.sql.base import create_sql_agent
from langchain_community.agent_toolkits.sql.toolkit import SQLDatabaseToolkit
from langchain_community.utilities import SQLDatabase
from langchain_core.prompts import ChatPromptTemplate
from langchain_openai import ChatOpenAI


# Load environment variables from .env file
load_dotenv(".env")

# Constants for MySQL Database
mysql_user = os.getenv("MYSQL_USER")
mysql_password = os.getenv("MYSQL_PASSWORD")
mysql_host = os.getenv("MYSQL_HOST")
mysql_port = os.getenv("MYSQL_PORT")
mysql_db = os.getenv("MYSQL_DATABASE")


# ==================== RAG_SQL Agent ====================
def sql_agent(user_input: str) -> str:
    db_uri = f"mysql+mysqlconnector://{mysql_user}:{mysql_password}@{mysql_host}:{mysql_port}/{mysql_db}"

    try:
        db = SQLDatabase.from_uri(db_uri)
    except Exception as e:
        return f"[ERROR] Failed to connect to the database: {str(e)}"

    try:
        llm = ChatOpenAI(model="gpt-4", temperature=0)
        toolkit = SQLDatabaseToolkit(db=db, llm=llm)
        agent_executor = create_sql_agent(llm=llm, toolkit=toolkit, verbose=True)
        return agent_executor.run(user_input)
    except Exception as e:
        return f"[ERROR] {str(e)}"


def assistant_agent(sql_input: str) -> str:
    """
    This function generates a response from the assistant agent
    based on the SQL query results provided as input.
    """
    prompt = ChatPromptTemplate.from_messages(
        [
            (
                "system",
                """р╕Др╕╕р╕Ур╕Др╕╖р╕нр╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕в р╕нр╕▓р╕кр╕▓р╕кр╕бр╕▒р╕Др╕гр╕кр╕▓р╕Шр╕▓р╕гр╕Ур╕кр╕╕р╕Вр╕Ыр╕гр╕░р╕Ир╕│р╕лр╕бр╕╣р╣Ир╕Ър╣Йр╕▓р╕Щ (р╕нр╕кр╕б.) 
        р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕╕р╕Вр╕ар╕▓р╕Юр╕Вр╕нр╕Зр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕в  р╕Др╕╕р╕Ур╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Хр╕нр╕Ър╕Др╕│р╕Цр╕▓р╕бр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕╕р╕Вр╕ар╕▓р╕Юр╕Вр╕нр╕Зр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╣Др╕Фр╣Й р╣Вр╕Фр╕вр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕бр╕╡ Field р╕нр╕вр╕╣р╣Ир╣Гр╕Щр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕бр╕╡р╕Фр╕▒р╕Зр╕Щр╕╡р╣Й  
        hn               -- р╕лр╕бр╕▓р╕вр╣Ар╕ер╕Вр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕в,
        date             -- р╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕е
        full_name        -- р╕Кр╕╖р╣Ир╕нр╣Бр╕ер╕░р╕Щр╕▓р╕бр╕кр╕Бр╕╕р╕ер╕Вр╕нр╕Зр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕в
        address          -- р╕Чр╕╡р╣Ир╕нр╕вр╕╣р╣Ир╕Вр╕нр╕Зр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕в
        bmi              -- р╕Фр╕▒р╕Кр╕Щр╕╡р╕бр╕зр╕ер╕Бр╕▓р╕в (Body Mass Index)
        sbp              -- р╕Др╕зр╕▓р╕бр╕Фр╕▒р╕Щр╣Вр╕ер╕лр╕┤р╕Хр╕Лр╕┤р╕кр╣Вр╕Хр╕ер╕┤р╕Б (Systolic Blood Pressure)
        dbp              -- р╕Др╕зр╕▓р╕бр╕Фр╕▒р╕Щр╣Вр╕ер╕лр╕┤р╕Хр╕Фр╣Йр╕▓р╕Щр╕ер╣Ир╕▓р╕З (Diastolic Blood Pressure)
        blood_sugar      -- р╕гр╕░р╕Фр╕▒р╕Ър╕Щр╣Йр╕│р╕Хр╕▓р╕ер╣Гр╕Щр╣Ар╕ер╕╖р╕нр╕Ф
        bone_status      -- р╕кр╕Цр╕▓р╕Щр╕░р╕Вр╕нр╕Зр╕Бр╕гр╕░р╕Фр╕╣р╕Б
        dementia         -- р╕кр╕Цр╕▓р╕Щр╕░р╕кр╕бр╕нр╕Зр╣Ар╕кр╕╖р╣Ир╕нр╕б     (0 = р╣Ар╕Чр╣Зр╕И, 1 = р╕Ир╕гр╕┤р╕З)
        depression       -- р╕кр╕Цр╕▓р╕Щр╕░р╕Лр╕╢р╕бр╣Ар╕ир╕гр╣Йр╕▓       (0 = р╣Ар╕Чр╣Зр╕И, 1 = р╕Ир╕гр╕┤р╕З)
        nutrition_status -- р╕кр╕Цр╕▓р╕Щр╕░р╣Вр╕ар╕Кр╕Щр╕▓р╕Бр╕▓р╕г
        smoking          -- р╕кр╕Цр╕▓р╕Щр╕░р╕Бр╕▓р╕гр╕кр╕╣р╕Ър╕Ър╕╕р╕лр╕гр╕╡р╣И     (0 = р╣Ар╕Чр╣Зр╕И, 1 = р╕Ир╕гр╕┤р╕З).
        recorder         -- р╕Ьр╕╣р╣Йр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕е    
        р╕Хр╕нр╕Ър╣Вр╕Фр╕вр╣Гр╕Кр╣Йр╕ар╕▓р╕йр╕▓р╣Др╕Чр╕в р╣Бр╕ер╕░ р╕бр╕╡ emoji р╕Ыр╕гр╕░р╕Бр╕нр╕Ър╕Бр╕▓р╕гр╕Хр╕нр╕Ър╕Др╕│р╕Цр╕▓р╕б
        р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Бр╕▓р╕гр╕Хр╕нр╕Ър╕Др╕│р╕Цр╕▓р╕б р╣Ар╕Кр╣Ир╕Щ
        тЬЕ р╣Вр╕Ыр╕гр╕Фр╕Хр╕нр╕Ър╣Вр╕Фр╕вр╣Гр╕Кр╣Йр╕ар╕▓р╕йр╕▓р╣Др╕Чр╕в р╣Бр╕ер╕░р╣Гр╕кр╣И emoji р╣Гр╕лр╣Йр╣Ар╕лр╕бр╕▓р╕░р╕кр╕б р╣Ар╕Кр╣Ир╕Щ
        - ЁЯзСтАНтЪХя╕П р╕Кр╕╖р╣Ир╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕в
        - ЁЯПа р╕Чр╕╡р╣Ир╕нр╕вр╕╣р╣И
        - тЪЦя╕П BMI
        - ЁЯТУ р╕Др╕зр╕▓р╕бр╕Фр╕▒р╕Щр╣Вр╕ер╕лр╕┤р╕Х
        - ЁЯНм р╕Щр╣Йр╕│р╕Хр╕▓р╕ер╣Гр╕Щр╣Ар╕ер╕╖р╕нр╕Ф
        - ЁЯза р╕кр╕бр╕нр╕Зр╣Ар╕кр╕╖р╣Ир╕нр╕б
        - ЁЯШФ р╕Лр╕╢р╕бр╣Ар╕ир╕гр╣Йр╕▓
        - ЁЯЪм р╕кр╕╣р╕Ър╕Ър╕╕р╕лр╕гр╕╡р╣И
        - ЁЯУЭ р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕ер╣Ир╕▓р╕кр╕╕р╕Ф

        тЬЕ р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Др╕│р╕Хр╕нр╕Ър╕Чр╕╡р╣Ир╕Фр╕╡:
        "ЁЯзСтАНтЪХя╕Пр╕Щр╕▓р╕в р╕Б р╕Вр╕▓р╕з  
        ЁЯПа р╕Чр╕╡р╣Ир╕нр╕вр╕╣р╣И: 88/8 р╕лр╕бр╕╣р╣И 5 р╕Х.р╕кр╕╕р╕Вр╣Гр╕И  
        ЁЯТУ р╕Др╕зр╕▓р╕бр╕Фр╕▒р╕Щ: 120/80 mmHg  
        ЁЯНм р╕Щр╣Йр╕│р╕Хр╕▓р╕е: 95 mg/dL  
        тЪЦя╕П BMI: 23.5  
        ЁЯза р╣Др╕бр╣Ир╕бр╕╡р╕ар╕▓р╕зр╕░р╕кр╕бр╕нр╕Зр╣Ар╕кр╕╖р╣Ир╕нр╕б  
        ЁЯШФ р╣Др╕бр╣Ир╕бр╕╡р╕ар╕▓р╕зр╕░р╕Лр╕╢р╕бр╣Ар╕ир╕гр╣Йр╕▓  
        ЁЯЪм р╣Др╕бр╣Ир╕кр╕╣р╕Ър╕Ър╕╕р╕лр╕гр╕╡р╣И  
        ЁЯУЭ р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕ер╣Ир╕▓р╕кр╕╕р╕Ф: 14 р╕Бр╕╕р╕бр╕ар╕▓р╕Юр╕▒р╕Щр╕Шр╣М 2568"
        р╕вр╕┤р╕Щр╕Фр╕╡р╕Чр╕╡р╣Ир╣Др╕Фр╣Йр╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕нр╕Др╕╕р╕Ур╣Гр╕Щр╣Ар╕гр╕╖р╣Ир╕нр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕╕р╕Вр╕ар╕▓р╕Юр╕Вр╕нр╕Зр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕Щр╕░р╕Др╕гр╕▒р╕Ъ ЁЯШК
        """,
            ),
            ("user", "{input}"),
        ]
    )

    llm = ChatOpenAI(model="gpt-4o-mini")
    chain = prompt | llm
    result_summary = chain.invoke({"input": f"р╕кр╕гр╕╕р╕Ыр╕Вр╣Йр╕нр╕бр╕╣р╕е  {sql_input}"})

    return result_summary.content
